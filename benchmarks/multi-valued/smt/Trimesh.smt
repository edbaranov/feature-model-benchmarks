;; Trimesh=2 cycle=2 V=2 F=2 RelaxParameter=2 smoother=2 Jacobi=2 colorGS=2 line=2 zebraLine=2 preSmoothing=9 postSmoothing=9 alpha=18 beta=18
;; 
;; alpha=[0:5,1:10,2:15,3:20,4:25,5:30,6:35,7:40,8:45,9:50,10:55,11:60,12:65,13:70,14:75,15:80,16:85,17:90] beta=[0:5,1:10,2:15,3:20,4:25,5:30,6:35,7:40,8:45,9:50,10:55,11:60,12:65,13:70,14:75,15:80,16:85,17:90]
(set-logic QF_BV)
(declare-fun Trimesh () Bool)
(declare-fun cycle () Bool)
(declare-fun V () Bool)
(declare-fun F () Bool)
(declare-fun RelaxParameter () Bool)
(declare-fun smoother () Bool)
(declare-fun Jacobi () Bool)
(declare-fun colorGS () Bool)
(declare-fun line () Bool)
(declare-fun zebraLine () Bool)
(declare-fun preSmoothing () (_ BitVec 4))
(assert (and (bvuge preSmoothing (_ bv0 4)) (bvult preSmoothing (_ bv9 4))))
(declare-fun preSmoothing_0 () (_ Bool))
(declare-fun preSmoothing_1 () (_ Bool))
(declare-fun preSmoothing_2 () (_ Bool))
(declare-fun preSmoothing_3 () (_ Bool))
(declare-fun postSmoothing () (_ BitVec 4))
(assert (and (bvuge postSmoothing (_ bv0 4)) (bvult postSmoothing (_ bv9 4))))
(declare-fun postSmoothing_0 () (_ Bool))
(declare-fun postSmoothing_1 () (_ Bool))
(declare-fun postSmoothing_2 () (_ Bool))
(declare-fun postSmoothing_3 () (_ Bool))
(declare-fun alpha () (_ BitVec 5))
(assert (and (bvuge alpha (_ bv0 5)) (bvult alpha (_ bv18 5))))
(declare-fun alpha_0 () (_ Bool))
(declare-fun alpha_1 () (_ Bool))
(declare-fun alpha_2 () (_ Bool))
(declare-fun alpha_3 () (_ Bool))
(declare-fun alpha_4 () (_ Bool))
(declare-fun beta () (_ BitVec 5))
(assert (and (bvuge beta (_ bv0 5)) (bvult beta (_ bv18 5))))
(declare-fun beta_0 () (_ Bool))
(declare-fun beta_1 () (_ Bool))
(declare-fun beta_2 () (_ Bool))
(declare-fun beta_3 () (_ Bool))
(declare-fun beta_4 () (_ Bool))
(assert (= cycle (or V F)))
(assert (or (not V) (not F)))
(assert (= smoother (or Jacobi (or colorGS (or line zebraLine)))))
(assert (or (not Jacobi) (not colorGS)))
(assert (or (not Jacobi) (not line)))
(assert (or (not Jacobi) (not zebraLine)))
(assert (or (not colorGS) (not line)))
(assert (or (not colorGS) (not zebraLine)))
(assert (or (not line) (not zebraLine)))
(assert (bvugt (bvadd preSmoothing postSmoothing) (_ bv0 4 )))
(assert (bvuge (bvadd alpha beta) (_ bv16 5 )))
(assert (bvult ((_ zero_extend 1) (bvadd alpha beta)) (_ bv34 6 )))
(assert Trimesh)
(assert cycle)
(assert smoother)
(assert (= preSmoothing_0 (= (bvand preSmoothing (_ bv1 4)  ) (_ bv1 4))))
(assert (= preSmoothing_1 (= (bvand preSmoothing (_ bv2 4)  ) (_ bv2 4))))
(assert (= preSmoothing_2 (= (bvand preSmoothing (_ bv4 4)  ) (_ bv4 4))))
(assert (= preSmoothing_3 (= (bvand preSmoothing (_ bv8 4)  ) (_ bv8 4))))
(assert (= postSmoothing_0 (= (bvand postSmoothing (_ bv1 4)  ) (_ bv1 4))))
(assert (= postSmoothing_1 (= (bvand postSmoothing (_ bv2 4)  ) (_ bv2 4))))
(assert (= postSmoothing_2 (= (bvand postSmoothing (_ bv4 4)  ) (_ bv4 4))))
(assert (= postSmoothing_3 (= (bvand postSmoothing (_ bv8 4)  ) (_ bv8 4))))
(assert (= alpha_0 (= (bvand alpha (_ bv1 5)  ) (_ bv1 5))))
(assert (= alpha_1 (= (bvand alpha (_ bv2 5)  ) (_ bv2 5))))
(assert (= alpha_2 (= (bvand alpha (_ bv4 5)  ) (_ bv4 5))))
(assert (= alpha_3 (= (bvand alpha (_ bv8 5)  ) (_ bv8 5))))
(assert (= alpha_4 (= (bvand alpha (_ bv16 5)  ) (_ bv16 5))))
(assert (= beta_0 (= (bvand beta (_ bv1 5)  ) (_ bv1 5))))
(assert (= beta_1 (= (bvand beta (_ bv2 5)  ) (_ bv2 5))))
(assert (= beta_2 (= (bvand beta (_ bv4 5)  ) (_ bv4 5))))
(assert (= beta_3 (= (bvand beta (_ bv8 5)  ) (_ bv8 5))))
(assert (= beta_4 (= (bvand beta (_ bv16 5)  ) (_ bv16 5))))
