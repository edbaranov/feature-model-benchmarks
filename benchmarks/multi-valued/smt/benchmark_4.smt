;; benchmark_4=2 V0=2 V1=2 V2=2 V3=2 V4=2 V5=2 V6=2 V9=2 V10=2 V11=2 V12=2 V13=2 V14=2 V15=2 V16=2 V18=2 V19=2 V20=2 V21=2 V24=2 V25=2 V26=2 V27=2 V28=2 V29=2 V30=2 V31=2 V32=2 V34=2 V35=2 V36=2 V37=2 V38=2 V39=2 V40=2 V41=2 V42=2 V44=2 V45=2 V46=2 V47=2 V48=2 V49=2 V50=2 V51=2 V52=2 V53=2 V54=2 V55=2 V56=2 V57=2 MV7=4 MV8=3 MV17=4 MV22=3 MV23=3 MV33=5 MV43=3
;; 
;; 
(set-logic QF_BV)
(declare-fun benchmark_4 () Bool)
(declare-fun V0 () Bool)
(declare-fun V1 () Bool)
(declare-fun V2 () Bool)
(declare-fun V3 () Bool)
(declare-fun V4 () Bool)
(declare-fun V5 () Bool)
(declare-fun V6 () Bool)
(declare-fun V9 () Bool)
(declare-fun V10 () Bool)
(declare-fun V11 () Bool)
(declare-fun V12 () Bool)
(declare-fun V13 () Bool)
(declare-fun V14 () Bool)
(declare-fun V15 () Bool)
(declare-fun V16 () Bool)
(declare-fun V18 () Bool)
(declare-fun V19 () Bool)
(declare-fun V20 () Bool)
(declare-fun V21 () Bool)
(declare-fun V24 () Bool)
(declare-fun V25 () Bool)
(declare-fun V26 () Bool)
(declare-fun V27 () Bool)
(declare-fun V28 () Bool)
(declare-fun V29 () Bool)
(declare-fun V30 () Bool)
(declare-fun V31 () Bool)
(declare-fun V32 () Bool)
(declare-fun V34 () Bool)
(declare-fun V35 () Bool)
(declare-fun V36 () Bool)
(declare-fun V37 () Bool)
(declare-fun V38 () Bool)
(declare-fun V39 () Bool)
(declare-fun V40 () Bool)
(declare-fun V41 () Bool)
(declare-fun V42 () Bool)
(declare-fun V44 () Bool)
(declare-fun V45 () Bool)
(declare-fun V46 () Bool)
(declare-fun V47 () Bool)
(declare-fun V48 () Bool)
(declare-fun V49 () Bool)
(declare-fun V50 () Bool)
(declare-fun V51 () Bool)
(declare-fun V52 () Bool)
(declare-fun V53 () Bool)
(declare-fun V54 () Bool)
(declare-fun V55 () Bool)
(declare-fun V56 () Bool)
(declare-fun V57 () Bool)
(declare-fun MV7 () (_ BitVec 2))
(declare-fun MV7_0 () (_ Bool))
(declare-fun MV7_1 () (_ Bool))
(declare-fun MV8 () (_ BitVec 2))
(assert (and (bvuge MV8 (_ bv0 2)) (bvult MV8 (_ bv3 2))))
(declare-fun MV8_0 () (_ Bool))
(declare-fun MV8_1 () (_ Bool))
(declare-fun MV17 () (_ BitVec 2))
(declare-fun MV17_0 () (_ Bool))
(declare-fun MV17_1 () (_ Bool))
(declare-fun MV22 () (_ BitVec 2))
(assert (and (bvuge MV22 (_ bv0 2)) (bvult MV22 (_ bv3 2))))
(declare-fun MV22_0 () (_ Bool))
(declare-fun MV22_1 () (_ Bool))
(declare-fun MV23 () (_ BitVec 2))
(assert (and (bvuge MV23 (_ bv0 2)) (bvult MV23 (_ bv3 2))))
(declare-fun MV23_0 () (_ Bool))
(declare-fun MV23_1 () (_ Bool))
(declare-fun MV33 () (_ BitVec 3))
(assert (and (bvuge MV33 (_ bv0 3)) (bvult MV33 (_ bv5 3))))
(declare-fun MV33_0 () (_ Bool))
(declare-fun MV33_1 () (_ Bool))
(declare-fun MV33_2 () (_ Bool))
(declare-fun MV43 () (_ BitVec 2))
(assert (and (bvuge MV43 (_ bv0 2)) (bvult MV43 (_ bv3 2))))
(declare-fun MV43_0 () (_ Bool))
(declare-fun MV43_1 () (_ Bool))
(assert benchmark_4)
(assert (or (not (= MV8 (_ bv1 2))) (not V10)))
(assert (or V6 (not (= MV8 (_ bv2 2)))))
(assert (or (not V2) (not V4)))
(assert (or (not V4) (not V9)))
(assert (or (not (= MV8 (_ bv1 2))) V10))
(assert (or (not V2) (not (= MV8 (_ bv2 2)))))
(assert (or V6 (not (= MV8 (_ bv0 2)))))
(assert (or (not V0) (not V9)))
(assert (or V0 (not V2)))
(assert (or V1 V4))
(assert (or (not V0) (not (= MV8 (_ bv2 2)))))
(assert (or (not V3) V5))
(assert (or (not V1) V11))
(assert (or V6 (not (= MV7 (_ bv2 2)))))
(assert (or (not V0) (not (= MV7 (_ bv0 2)))))
(assert (or (not V1) (or V9 (not V11))))
(assert (or (not V3) (or (not (= MV7 (_ bv1 2))) (not V9))))
(assert (= MV7_0 (= (bvand MV7 (_ bv1 2)  ) (_ bv1 2))))
(assert (= MV7_1 (= (bvand MV7 (_ bv2 2)  ) (_ bv2 2))))
(assert (= MV8_0 (= (bvand MV8 (_ bv1 2)  ) (_ bv1 2))))
(assert (= MV8_1 (= (bvand MV8 (_ bv2 2)  ) (_ bv2 2))))
(assert (= MV17_0 (= (bvand MV17 (_ bv1 2)  ) (_ bv1 2))))
(assert (= MV17_1 (= (bvand MV17 (_ bv2 2)  ) (_ bv2 2))))
(assert (= MV22_0 (= (bvand MV22 (_ bv1 2)  ) (_ bv1 2))))
(assert (= MV22_1 (= (bvand MV22 (_ bv2 2)  ) (_ bv2 2))))
(assert (= MV23_0 (= (bvand MV23 (_ bv1 2)  ) (_ bv1 2))))
(assert (= MV23_1 (= (bvand MV23 (_ bv2 2)  ) (_ bv2 2))))
(assert (= MV33_0 (= (bvand MV33 (_ bv1 3)  ) (_ bv1 3))))
(assert (= MV33_1 (= (bvand MV33 (_ bv2 3)  ) (_ bv2 3))))
(assert (= MV33_2 (= (bvand MV33 (_ bv4 3)  ) (_ bv4 3))))
(assert (= MV43_0 (= (bvand MV43 (_ bv1 2)  ) (_ bv1 2))))
(assert (= MV43_1 (= (bvand MV43 (_ bv2 2)  ) (_ bv2 2))))
